{
	"nodes":[
		{"id":"d08c53e29773b9ca","type":"group","x":-1220,"y":-276,"width":600,"height":1440,"label":"使用变量"},
		{"id":"41f0fe60f613f642","type":"group","x":1240,"y":-1840,"width":600,"height":719,"label":"计算机-内存"},
		{"id":"784bbf22ef7e4fd5","type":"text","text":"**变量命名** -- C++提倡使用有一定含义的变量名；\n\n>C++变量名的命名规则：\n\n· 在变量名称中，只能使用字母、数字和下划线;\n· 变量名称的第一个字符不能是数字。\n· 区分大写字符与小写字符；\n· 不能将C++关键字用作变量名称；\n· 以两个下划线和大写字符开头的名称被保留给实现（编译器及其使用的资源）使用。\n· 以一个下划线开头的名称被保留给实现，用作全局表示符；\n· C++对于变量名称的长度没有限制，名称中所有的字符都是有意义的，但有些平台有长度限制。","x":-1200,"y":144,"width":560,"height":389},
		{"id":"3a0492bc5211b7d1","type":"text","text":"**变量初始化**\n>**初始化**可以将变量赋值和声明合并在一起。\n\n初始化的方式：\n①使用**字面值常量(常数)** 进行初始化；\n②使用**其他变量**进行初始化，前提该变量已经初始化过；\n③使用**表达式**进行初始化；\n```cpp\nint uncles = 5;                    // 方式①\nint aunts = uncles;                // 方式②\nint chairs = aunts + uncles + 4;   // 方式③\n```\n>C++11初始化方式：`int emus = {7}` \n>首先，采用这种方式时，等号（=）可选；\n>其次，若大括号内为空，则默认变量被初始化为零；\n>最后，可以有效防范类型转换错误。","x":-1200,"y":638,"width":560,"height":506},
		{"id":"1586ead37225f225","type":"text","text":"程序需要一种标识存储的数据的方法 -- 使用变量","x":-1200,"y":-256,"width":560,"height":60,"color":"4"},
		{"id":"2360f2d2adfc0ac9","type":"text","text":">如何使用变量？\n\n**声明变量** -- 在声明中，使用类型描述了信息的类型，通过符号来表示其值的变量名。","x":-1200,"y":-96,"width":560,"height":133},
		{"id":"15f9f89d9ef293a3","type":"text","text":"《C++ Primer Plus》\n第3章 处理数据","x":-1949,"y":-678,"width":260,"height":83,"color":"1"},
		{"id":"1eba8b1a302152fe","type":"text","text":"面向对象编程（OOP）的本质是设计并扩展自己的数据类型。\n设计自己的数据类型就是让类型与数据匹配。","x":-1322,"y":-706,"width":326,"height":140},
		{"id":"86a5da7cd0ab4b4f","type":"text","text":">不同**整数**的类型所占用的内存量:\n\n`short` -- 至少16位\n`int` -- 16位（取值范围：-32768~32767）\n`long` -- 至少32位\n`long long` -- 至少64位","x":-580,"y":64,"width":474,"height":227},
		{"id":"0c7cc1a6eaab20ab","type":"text","text":">如何检查数据类型的长度？\n\n在C++程序中，**sizeof运算符**和**climits头文件**两个C++工具可以用来检查数据类型的长度。","x":-580,"y":503,"width":474,"height":157},
		{"id":"f15a6feaed86d515","type":"text","text":"C++内置的数据类型分为：基本类型和复合类型；\n基本类型是整数和浮点数。","x":-663,"y":-693,"width":312,"height":114},
		{"id":"f309438bc8698183","type":"text","text":"**整型字面值**\n整型字面值（常量）是显式地书写的常量，如122、137。\n","x":510,"y":-256,"width":410,"height":82},
		{"id":"0711f5b0f259b581","type":"text","text":"**整型数据**的定义\n整型数据（整数）就是指没有小数部分的数字，如2、98、-520和0。","x":111,"y":-706,"width":380,"height":108,"color":"4"},
		{"id":"68f59e88fb9dd528","type":"text","text":">如何选择**整型数据**的类型？\n\n通常，`int`被设置为对目标计算机而言最为“自然”的长度；\n**自然长度**指的是计算机处理起来效率最高的长度。\n所以，如果没有非常必要的理由，建议尽量使用int类型。","x":20,"y":626,"width":440,"height":180},
		{"id":"6580b3eca65ee7e5","type":"text","text":"术语**宽度**用来表述存储**整数**时使用的内存量；使用的内存越多，则宽度越大。","x":1260,"y":-1820,"width":560,"height":72},
		{"id":"bff6110f230e0306","type":"text","text":"**字节(byte)** 通常指的是8**位**的内存单元；因此，**字节**就作为描述计算机内存量的度量单位，1KB=1024B（字节），1MB=1024KB。","x":1260,"y":-1262,"width":560,"height":120},
		{"id":"78f393a4e1739e2a","type":"text","text":">计算机**内存**是有一些叫做**位(bit)** 的单元组成。\n\n计算机内存的基本单元是**位**，可以将**位**看作电子开关，可以开、也可以关，关的状态值可以表示为0，开的状态值可以表示为1。\n\n>**思考**：计算机使用芯片进行计算，而芯片是由大量晶体管组成，所有计算机使用二进制。\n\n8位的内存块可以设置出256种不同的组合，因为每一位有两种状态，所以8位的总组合数=2x2x2x2x2x2x2x2(2的8次方)=256。\n因此，8位的内存单元可以表示0~255或-128~127","x":1260,"y":-1679,"width":560,"height":355},
		{"id":"59f9488f34d2fd80","type":"text","text":"**整数**的基本类型（按宽度递增的顺序排列）：`char`、`short`、`int`、`long`、`long long` (C++11)，其中每个类型又有有符号类型和无符号类型，总共10种数据类型。","x":-571,"y":-226,"width":474,"height":131},
		{"id":"f6bb2c2b162ea254","type":"text","text":"以下几种情况，可以使用其他类型：\n①如果变量的值不可能为负，如字数，可以使用无符号类型，这样可以表示更大的值。\n②如果明确整数值大于16位的最大值，则使用long；若存储的值超过20亿，可使用long long。\n③如果short比int小，则使用short可以节省内存；所以如果需要节省内存时，则应该使用short而不是使用int。\n④如果只需要一个字节，则可使用char。","x":20,"y":889,"width":440,"height":271},
		{"id":"a40d1dd5cdd9bb30","type":"text","text":"**无符号数据类型**\n无符号数据类型不能存储负数值，但其优点可以增大变量存储的最大值；若short的范围是-32768~+32767；则无符号类型short的范围是0~65535。\n>注意：使用无符号类型的变量，必须保证存储的数据不能为负数，如人口、个数等。\n\n声明方式：只需使用关键字unsigned来修饰即可；如:\n```cpp\nunsigned short change;\n\n// unsigned是unsigned int的缩写；\nunsigned int rovert;\nunsigned quarterback;\n\nunsigned long gone;\n```","x":72,"y":48,"width":438,"height":534},
		{"id":"315f4d3df3f02941","type":"text","text":"**sizeof运算符**\n作用：可对类型名和变量名使用sizeof运算符。对类型名(如int)使用sizeof运算符时，应将名称放在括号内；\n但对变量名(如n_short)使用该运算符，括号是**可选的**\n```cpp\nsizeof (int);    // 类型名\nsizeof n_short;  // 变量名\n```","x":20,"y":1200,"width":440,"height":298},
		{"id":"9dafa4b7973cfec2","type":"text","text":"**climits头文件**\n头文件climits定义了符号常量来表示类型的限制；例如：\nCHAR_BIT -- char的位数\nCHAR_MAX -- char的最大值\nCHAR_MIN -- char的最小值\nINT_MAX -- int的最大值\nINT_MIN -- int的最小值\n...\n\n\n","x":20,"y":1560,"width":440,"height":280},
		{"id":"68406ee5b4f58e49","x":62,"y":-317,"width":356,"height":286,"type":"text","text":"**char类型**\n**定义**：char类型是专门位存储字符（字母或数字）而设计的类型。\n>编程语言通过使用字母的数值编码来存储字母，所以char类型也是一种整数类型。\n\nchar类型所占用的内存量为一个字节（8位）；实际上，很多系统支持的字符都不超过128个。 "},
		{"id":"0287d39689e57bc5","type":"text","text":"**常量的三种计数方式（与C一样）：**\n>C++使用常量的前一（两）位来标识数字常量的基数\n\n\n①基数为10（十进制）；\n>👉常量的第一位为1~9；\n>因此93是以10为基数的。\n\n②基数为8（八进制）-- 老式UNIX版本；\n>👉常量的第一位为0，第二位为1~7；\n>因此042是以8为基数的，相当于十进制的34。\n\n③基数为16（十六进制）-- 硬件黑客的最爱；\n>👉常量的前两位为0x或0X；\n>因此，0x42（十六进制）= 66（十进制）","x":560,"y":48,"width":500,"height":449},
		{"id":"7112ed491b8dc77a","type":"text","text":">C++程序如何确定常量的类型?\n\n1. 除非有理由存储为其他类型，否则C++将整型常量存储为int类型；\n2. 看**后缀**，后缀是放在数字常量后面的字母，用于表示类型；一般，l或L->long，u或U->unsigned int，例如，2022l、2023U.\n3. 看**长度**，在C++中，十进制，与十六进制和八进制的规则稍有不同；在int为16位的计算机系统中，对于不带后缀的整数，十进制：20000被表示为int类型、40000被表示为long类型、3000000000被表示为long long类型；十六进制或八进制：0x9C40(40000)被表示为unsigned int，这是由于十六进制常用来表示内存地址，而内存地址是没有符合的，因此，unsigned int比long更合适用来表示16位的地址。","x":1180,"y":273,"width":443,"height":440}
	],
	"edges":[
		{"id":"42d6c8bede305987","fromNode":"15f9f89d9ef293a3","fromSide":"right","toNode":"1eba8b1a302152fe","toSide":"left"},
		{"id":"ba16219b57a9b9e4","fromNode":"1eba8b1a302152fe","fromSide":"right","toNode":"f15a6feaed86d515","toSide":"left"},
		{"id":"599f00d12976797c","fromNode":"0711f5b0f259b581","fromSide":"bottom","toNode":"59f9488f34d2fd80","toSide":"top"},
		{"id":"30eb90ef5276140d","fromNode":"6580b3eca65ee7e5","fromSide":"bottom","toNode":"78f393a4e1739e2a","toSide":"top"},
		{"id":"90fae56d1b4fba3a","fromNode":"78f393a4e1739e2a","fromSide":"bottom","toNode":"bff6110f230e0306","toSide":"top"},
		{"id":"c098c41e1f87f788","fromNode":"59f9488f34d2fd80","fromSide":"bottom","toNode":"86a5da7cd0ab4b4f","toSide":"top"},
		{"id":"279fe96c62fa3862","fromNode":"86a5da7cd0ab4b4f","fromSide":"bottom","toNode":"0c7cc1a6eaab20ab","toSide":"top"},
		{"id":"cd7fef8d4f981196","fromNode":"0c7cc1a6eaab20ab","fromSide":"right","toNode":"315f4d3df3f02941","toSide":"left"},
		{"id":"66e17092f3a9becc","fromNode":"0c7cc1a6eaab20ab","fromSide":"right","toNode":"9dafa4b7973cfec2","toSide":"left"},
		{"id":"4a348384d675ab5c","fromNode":"1586ead37225f225","fromSide":"bottom","toNode":"2360f2d2adfc0ac9","toSide":"top"},
		{"id":"0b6507260de4c36f","fromNode":"2360f2d2adfc0ac9","fromSide":"bottom","toNode":"784bbf22ef7e4fd5","toSide":"top"},
		{"id":"3b03c915387e6d3f","fromNode":"f15a6feaed86d515","fromSide":"bottom","toNode":"1586ead37225f225","toSide":"top"},
		{"id":"81c077c845be7627","fromNode":"f15a6feaed86d515","fromSide":"right","toNode":"0711f5b0f259b581","toSide":"left"},
		{"id":"d187717108fe57f7","fromNode":"59f9488f34d2fd80","fromSide":"right","toNode":"a40d1dd5cdd9bb30","toSide":"left"},
		{"id":"a25035c8c261a721","fromNode":"784bbf22ef7e4fd5","fromSide":"bottom","toNode":"3a0492bc5211b7d1","toSide":"top"},
		{"id":"66db88f9c35c3392","fromNode":"59f9488f34d2fd80","fromSide":"right","toNode":"68f59e88fb9dd528","toSide":"left"},
		{"id":"7679a394c3318fad","fromNode":"68f59e88fb9dd528","fromSide":"bottom","toNode":"f6bb2c2b162ea254","toSide":"top"},
		{"id":"bb0250d492bd02e2","fromNode":"0711f5b0f259b581","fromSide":"bottom","toNode":"f309438bc8698183","toSide":"top"},
		{"id":"5186677ee0f47944","fromNode":"f309438bc8698183","fromSide":"bottom","toNode":"0287d39689e57bc5","toSide":"top"},
		{"id":"d471253af68f9f4d","fromNode":"f309438bc8698183","fromSide":"bottom","toNode":"7112ed491b8dc77a","toSide":"top"},
		{"id":"689910a01371b08c","fromNode":"0711f5b0f259b581","fromSide":"top","toNode":"6580b3eca65ee7e5","toSide":"left"},
		{"id":"5122f3b7cffabab7","fromNode":"68f59e88fb9dd528","fromSide":"right","toNode":"7112ed491b8dc77a","toSide":"left"},
		{"id":"e874a8032d33b496","fromNode":"59f9488f34d2fd80","fromSide":"right","toNode":"68406ee5b4f58e49","toSide":"left"}
	]
}